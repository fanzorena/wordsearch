#!/bin/sh ruby

require 'wordsearch'
require 'optparse'
require 'json'

Encoding::default_external = Encoding::UTF_8

options = {
  rows: 15,
  columns: 15,
  backward: false,
  diagonal: false,
  seed: Time.now.to_i,
  solve: false,
  words: [],
  word_count: 0,
  word_rules: nil
}

OptionParser.new do |opts|
  opts.banner = "USAGE: #{$0} [options] [words] [-]"
  opts.on "-r", "--rows ROWS" do |rows|
    options[:rows] = rows.to_i
  end
  opts.on "-c", "--columns COLS" do |cols|
    options[:columns] = cols.to_i
  end
  opts.on "-b", "--[no-]backward" do |backward|
    options[:backward] = backward
  end
  opts.on "-d", "--[no-]diagonal" do |diagonal|
    options[:diagonal] = diagonal
  end
  opts.on "-s", "--seed SEED" do |seed|
    options[:seed] = seed.to_i
  end
  opts.on "-k", "--word-count WORD_COUNT" do |word_count|
    options[:word_count] = word_count.to_i;
  end
  opts.on "-q", "--word-rules RULES" do |rules|
    options[:word_rules] = JSON.parse(File.read(rules));
  end
  opts.on "-w", "--word-file FILE" do |file|
    options[:words].concat(File.readlines(file).map { |word| word.strip })
  end
  opts.on "-j", "--json" do |json|
    options[:json] = json
  end
  opts.on "-t", "--[no-]text" do |text|
    options[:text] = text
    options[:solve] = text
  end
end.parse!

while ARGV.any?
  break if ARGV[0] == "-"
  options[:words].push ARGV.shift
end

options[:words].concat(ARGF.readlines.map { |word| word.strip }) if ARGV.last == "-"

if options[:words].empty?
  abort "you must specify some words to use to create the puzzle"
elsif options[:word_count] === 0
  abort "you must specify how many words of the file to use (-wc COUNT)"
#elsif options[:words].any? { |w| w.length > options[:rows] && w.length > options[:columns] }
#  abort "words must all be between #{options[:rows]} and #{options[:columns]} letters"
end

puzzle = WordSearch::Puzzle.new(options[:words],
  rows: options[:rows],
  columns: options[:columns],
  diagonal: options[:diagonal],
  backward: options[:backward],
  seed: options[:seed],
  word_count: options[:word_count],
  word_rules: options[:word_rules])
  
if options[:text]
  puts "seed: #{puzzle.seed}"
  puts "unused squares: #{puzzle.unused_squares} (of #{puzzle.grid.size})"
  puts
  puts puzzle.to_s(solution: options[:solve])
else
  puts puzzle.to_json()
end